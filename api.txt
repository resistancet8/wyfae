1) Signup Api: 

159.89.171.16:9000/user_auth/signup

Method Type: POST

Json request from frontend:

{
	"username": "unique_user1",
	"first_name": "Mantu",
	"sur_name": "Kumar",
	"email": "ad@gmail.com",
	"password": "test123",
	"dob": "12 Aug 2011"
}

Json Response from backend:

In Case of Success:
{
    "msg": "User Successfully Created",
    "status": "success",
    "code": "45",
    "token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVuaXF1ZV91c2VyOCIsImV4cCI6MTUzNjYwNDk5NH0.Qt7t1J1r9nfaeZ4sPUAIeatYzP0t_stK669lfmeifebQSe2NBmprqiZtuKPwaGrDhPglEVX0aLlVKiVY4M-5MQ"
}
status: 200

In Case of Failure:

{
    "status": "failure",
    "msg": "User already exists"
}
status:400


###########################
2) Signin/Login Api:
###########################

159.89.171.16:9000/user_auth/login

Method Type: POST

Json request from frontend:


{
	"username": "unique_user2",
	"password": "test123"
}

Json Response from backend:

In Case of Success:
{
    "msg": "Successfully logged in",
    "code": "54",
    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJleHAiOjE1Mzc2ODk4MjAsInVzZXJuYW1lIjoidW5pcXVlX3VzZXIxNyJ9.KW1-0m5eSbDQ7xeQjRiPWyf2gqGYlDkqUHX9-pZLoRKn7en5hgr5Ud4ObDr-zODgfjd1HdwAHI21LeEMcoS_KQ",
    "status": "success"
}


In Case of Failure:

Case1: If user does not exists
{
    "status": "failure",
    "msg": "User does not exists",
    "code": "53"
}

Case2: If Password is wrong
{
    "status": "failure",
    "msg": "Password is incorrect",
    "code": "55"
}

#####################
3) Logout Api:
####################

159.89.171.16:9000/user_auth/logout

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Method Type: POST 

Json Response:

In Case of Success:
{
    "msg": "Logged Out Successfully",
    "code": "70",
    "status": "success"
}

In Case Of Failure:

1. If no token supplied in headers
{
    "status": "failure",
    "msg": "No Token Supplied",
    "code": "72"
}

2. If token does not exists
{
    "status": "failure",
    "msg": "You are already logged out",
    "code": "71"
}



##########################
4) Reset Password
##########################
--------------------------------------------------------------------------------------
Step1: Send username that will trigger OTP mail to email associated with the username
--------------------------------------------------------------------------------------

api: 159.89.171.16:9000/user_auth/forgot_password

Method Type: POST

Json Request:
{
	"username": "unique_user12"
}

Json Response:

In Case of Success:
{
    "status": "success",
    "msg": "Please check for OTP in your asssociated email",
    "code": "82"
}

status: 200

In Case of failure:

1. If username is not valid i.e. blank
{"status": "failure", "code": "50", "msg": "Username cannot be blank"}
status: 400

2. If username does not exists
{"status": "failure", "code": "80", "msg": "User does not exists"}
status: 400

-------------------------------------------------------
Step2: Send username, password, otp to reset password
-------------------------------------------------------

api: 159.89.171.16:9000/user_auth/reset_password

Method Type: POST

Json Request:
{
	"username": "unique_user12",
	"otp": 659913,
	"password_1":"test_123"
}

Json Response:

In case of success:
{
    "status": "success",
    "msg": "Successfully Reset Password",
    "code": "89"
}
status: 200

In Case of Failure:

1. if username is not valid
{"status": "failure", "code": "50", "msg": "Username cannot be blank"}
status: 400

2. If OTP is not valid
{"status": "failure", "code": "84", "msg": "OTP cannot be blank"}
status: 400


3. If password is not valid
{"status": "failure", "code": "43", "msg": "Password must be betwenn 6 to 20 character"}

4. If OTP is not valid
{"status": "failure", "code": "85", "msg": "Not a Valid OTP"}
status: 400

5. In case passwrod reset unsuccessfull
{"status": "failure", "code": "88", "msg": "Password Reset Unsuccessfull"}
status: 400



####################
Profile Page
####################
-------------------------------------------
----------- Update about section ----------
-------------------------------------------

159.89.171.16:9000/user/update_about

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Json Request:
{
  "first_name" : "mantu",
  "sur_name": "kumar",
  "from": "Bangalore, Karnataka, India, Earth",
  "about": "Success is not final failure is not fatal - Winston Churchill",
  "dob": "10-10-2010",
  "langs": "Kannada, English",
  "contact": "9945126164",
  "email": "resistancet8@gmail.com",
  "favorite_art": "Writing"
}

Json Response:

Note: Everytime you update_about a new token is generated and the previous one is deleted.
      So you need to pass this token in header on next call.

In case of Success:
{
    "status": "success",
    "code": "51",
    "msg": "Successfully Updated Profile"
}

status: 200

In case of Failure:

1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}


3. If profile is not updated
{
    "status": "failure", 
    "code": "50", 
    "msg": "Could now Update Profile"
}

status: 400

-------------------------------------------
----------- Get Profile Page Data ---------
-------------------------------------------

159.89.171.16:9000/user/get_profile

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Json Response:

Note: Everytime you call 'get_profile' a new token is generated and the previous one is deleted.
      So you need to pass this token in header on next call.

Note: All the data will be returned in "profile_data" key. But for now only these things are returned

In Case of Success:
{
    "msg": "Fetched Data Successfully",
    "code": "20",
    "status": "success",
    "profile_data": {
        "mantu": "dummy",
        "creation_time": "2018-09-23T06:59:01.160",
        "sur_name": "kumar",
        "about": "Success is not final failure is not fatal - Winston Churchill",
        "langs": "Kannada, English",
        "first_name": "mantu",
        "dob": "10-10-2010",
        "from": "Bangalore, Karnataka, India, Earth",
        "email": "resistancet8@gmail.com",
        "contact": "9945126164",
        "favorite_art": "Writing"
    }
}


In Case of Failure:

1. If not a valid token in supplied
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}


2. If no profile data found
{
    "status": "failure", 
    "code": "21", 
    "msg": "No Profile Data Found"
}
