1) Signup Api: 

159.89.171.16:9000/user_auth/signup

Method Type: POST

Json request from frontend:

{
	"username": "unique_user1",
	"first_name": "Mantu",
	"sur_name": "Kumar",
	"email": "ad@gmail.com",
	"password": "test123",
	"dob": "12 Aug 2011"
}

Json Response from backend:

In Case of Success:
{
    "msg": "User Successfully Created",
    "status": "success",
    "code": "45",
    "token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVuaXF1ZV91c2VyOCIsImV4cCI6MTUzNjYwNDk5NH0.Qt7t1J1r9nfaeZ4sPUAIeatYzP0t_stK669lfmeifebQSe2NBmprqiZtuKPwaGrDhPglEVX0aLlVKiVY4M-5MQ"
}
status: 200

In Case of Failure:

{
    "status": "failure",
    "msg": "User already exists"
}
status:400


###########################
2) Signin/Login Api:
###########################

159.89.171.16:9000/user_auth/login

Method Type: POST

Json request from frontend:


{
	"username": "unique_user2",
	"password": "test123"
}

Json Response from backend:

In Case of Success:
{
    "msg": "Successfully logged in",
    "code": "54",
    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJleHAiOjE1Mzc2ODk4MjAsInVzZXJuYW1lIjoidW5pcXVlX3VzZXIxNyJ9.KW1-0m5eSbDQ7xeQjRiPWyf2gqGYlDkqUHX9-pZLoRKn7en5hgr5Ud4ObDr-zODgfjd1HdwAHI21LeEMcoS_KQ",
    "status": "success"
}


In Case of Failure:

Case1: If user does not exists
{
    "status": "failure",
    "msg": "User does not exists",
    "code": "53"
}

Case2: If Password is wrong
{
    "status": "failure",
    "msg": "Password is incorrect",
    "code": "55"
}

#####################
3) Logout Api:
####################

159.89.171.16:9000/user_auth/logout

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Method Type: POST 

Json Response:

In Case of Success:
{
    "msg": "Logged Out Successfully",
    "code": "70",
    "status": "success"
}

In Case Of Failure:

1. If no token supplied in headers
{
    "status": "failure",
    "msg": "No Token Supplied",
    "code": "72"
}

2. If token does not exists
{
    "status": "failure",
    "msg": "You are already logged out",
    "code": "71"
}



##########################
4) Reset Password
##########################
--------------------------------------------------------------------------------------
Step1: Send username that will trigger OTP mail to email associated with the username
--------------------------------------------------------------------------------------

api: 159.89.171.16:9000/user_auth/forgot_password

Method Type: POST

Json Request:
{
	"username": "unique_user12"
}

Json Response:

In Case of Success:
{
    "status": "success",
    "msg": "Please check for OTP in your asssociated email",
    "code": "82"
}

status: 200

In Case of failure:

1. If username is not valid i.e. blank
{"status": "failure", "code": "50", "msg": "Username cannot be blank"}
status: 400

2. If username does not exists
{"status": "failure", "code": "80", "msg": "User does not exists"}
status: 400

-------------------------------------------------------
Step2: Send username, password, otp to reset password
-------------------------------------------------------

api: 159.89.171.16:9000/user_auth/reset_password

Method Type: POST

Json Request:
{
	"username": "unique_user12",
	"otp": 659913,
	"password_1":"test_123"
}

Json Response:

In case of success:
{
    "status": "success",
    "msg": "Successfully Reset Password",
    "code": "89"
}
status: 200

In Case of Failure:

1. if username is not valid
{"status": "failure", "code": "50", "msg": "Username cannot be blank"}
status: 400

2. If OTP is not valid
{"status": "failure", "code": "84", "msg": "OTP cannot be blank"}
status: 400


3. If password is not valid
{"status": "failure", "code": "43", "msg": "Password must be betwenn 6 to 20 character"}

4. If OTP is not valid
{"status": "failure", "code": "85", "msg": "Not a Valid OTP"}
status: 400

5. In case passwrod reset unsuccessfull
{"status": "failure", "code": "88", "msg": "Password Reset Unsuccessfull"}
status: 400



####################
Profile Page
####################
-------------------------------------------
----------- Update about section ----------
-------------------------------------------

159.89.171.16:9000/user/update_about

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Json Request:
{
  "first_name" : "mantu",
  "sur_name": "kumar",
  "from": "Bangalore, Karnataka, India, Earth",
  "about": "Success is not final failure is not fatal - Winston Churchill",
  "dob": "10-10-2010",
  "langs": "Kannada, English",
  "contact": "9945126164",
  "email": "resistancet8@gmail.com",
  "favorite_art": "Writing"
}

Json Response:

In case of Success:
{
    "status": "success",
    "code": "51",
    "msg": "Successfully Updated Profile"
}

status: 200

In case of Failure:

1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}


3. If profile is not updated
{
    "status": "failure", 
    "code": "50", 
    "msg": "Could now Update Profile"
}

status: 400


-------------------------------------------
---------- Update Memory Book Privacy -----
-------------------------------------------

-------------------------------------------
----------- Update about section ----------
-------------------------------------------

159.89.171.16:9000/user/update_about

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
  "memory_book_privacy": "privacy_type"
}

Note: privacy_type can be 'public' or 'private'


Json Response:

In case of Success:
{
    "status": "success",
    "code": "51",
    "msg": "Successfully Updated Profile"
}

status: 200

In case of Failure:

1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}


3. If profile is not updated
{
    "status": "failure",
    "code": "50",
    "msg": "Could now Update Profile"
}
status: 400


-------------------------------------------
----------- Get Profile Page Data ---------
-------------------------------------------

159.89.171.16:9000/user/get_profile

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Json Request:
{
	"profile_username": "unique_user1",
	"skip_count": 0
}


Note: "profile_username": the profile which you want to view
Note: Maximum 10 records are returned
Note: Memory book is not returned if "memory_book_privacy" is "private"
      and the user requesting for profile_data is not the logged in user.

Json Response:

In Case of Success:
{
    "status": "success",
    "profile_data": {
        "memory_book_privacy": "public",
        "first_name": "mantu",
        "creation_time": "2018-10-06T10:13:38.436",
        "memory_book_privacry": "public",
        "stats": {
            "no_of_wins": 0,
            "content_shared": 0,
            "anonymous_shared": 0,
            "no_of_comments": 0,
            "no_of_likes": 0
        },
        "about": "Success is not final failure is not fatal - Winston Churchill",
        "sur_name": "kumar",
        "dob": "10-10-2010",
        "langs": "Kannada, English, kennedy",
        "favorite_art": "Writing, Singing, dancing, running",
        "from": "Bangalore, Karnataka, India, Earth"
    },
    "memory_book": [
        {
            "text": "This is dummy text",
            "url": "static/unique_user1/memory_book/afc7d04c-07e5-43d6-bb7f-4c301ead37a6.jpg",
            "shared_type": "public",
            "username": "unique_user1",
            "post_type": "memory_book",
            "_id": "5bb88b183412654cdd47779c"
        }
    ],
    "code": "20",
    "msg": "Fetched Data Successfully",
    "art_content": [
        {
            "text": "This is dummy text",
            "url": "static/unique_user1/art/f554b02a-0aca-490a-bead-e977cafc1e1f.jpg",
            "shared_type": "public",
            "post_type": "art",
            "username": "unique_user1",
            "art_type": "gazal",
            "_id": "5bb88b0c3412654cdd477796"
        },
        {
            "text": "This is dummy text",
            "url": "static/unique_user1/art/310b1172-6091-4a56-ad1c-2230c9f13e26.jpg",
            "shared_type": "public",
            "post_type": "art",
            "username": "unique_user1",
            "art_type": "song",
            "_id": "5bb88b053412654cdd477793"
        },
        {
            "text": "This is dummy text",
            "url": "static/unique_user1/art/973c71f1-71a5-4652-8e89-5307c411d6a8.jpg",
            "shared_type": "public",
            "post_type": "art",
            "username": "unique_user1",
            "art_type": "poem",
            "_id": "5bb88b003412654cdd477790"
        }
    ]
}

In Case of Failure:

1. If not a valid token in supplied
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}


2. If no profile data found
{
    "status": "failure", 
    "code": "21", 
    "msg": "No Profile Data Found"
}


-------------------------------------
------- Update Profile Pic ----------
-------------------------------------

159.89.171.16:9000/user/update_profile_pic

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Request:

form-data
key: pic
value: uploaded_pic


Json Response:

In case of Success:
{
    "url": "static/unique_user1/profile/68d09ecf-8ac1-4172-ac82-3a9da30d47f9.jpg",
    "status": "success",
    "msg": "Profile pic uploaded successfully"
}
status: 200

Note: You can show the image by appending "159.89.171.16:9000/static/unique_user1/profile/url"
      eg: 159.89.171.16:9000/static/unique_user1/profile/68d09ecf-8ac1-4172-ac82-3a9da30d47f9.jpg


In case of Failure:


1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400

3. If no 'pic' is supplied
{
    "status": "failure",
    "msg": "No pic supplied"
}
status: 400

4. If profile is not updated with 'url'
{
    "status": "failure",
    "code": "50",
    "msg": "Could now Update Profile"
}

status: 400


##############################
##### Insert Post ############
##############################

159.89.171.16:9000/user/insert_post

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Request:

form-data
key: pic
value: uploaded_pic

key: text
value: "Post Text"

key: post_type
value: art (can be 'memory_book' or 'art')

key: shared_type
value: 'public' (can be: "public", "anonymous", "compete", "save")


key: art_type
value: 'poem' (can be: "poem", "story", "quotes", "gazal", "rap", "singing", "comedy", "dance")


Json Response:

In Case of Success:
{
    "status": "success",
    "msg": "Post Inserted Successfully."
}

In Case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400

3. If no 'pic' is supplied
{
    "status": "failure",
    "msg": "No pic supplied"
}
status: 400

4. If Plagarised content
{"status": "failure", "msg": "plagarised content"}



###################################################
######## Load More memory_book/art Post ###########
###################################################

159.89.171.16:9000/user/load_profile_post

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
	"profile_username": "unique_user1",
	"post_type": "memory_book", 
	"skip_count": 2
}

Note: skip_count - Number of post you want to skip.
Note: Maximum 10 Post will be returned.
Note: 'post_type' - can be 'memory_book' or 'art'


In case of Success:
{
    "memory_book": [
        {
            "username": "unique_user1",
            "post_type": "memory_book",
            "_id": "5bb9afbc3412655d35c54337",
            "url": "static/unique_user1/memory_book/64451662-35a1-4603-82e8-173f92b07902.jpg",
            "shared_type": "public",
            "text": "This is dummy text2",
            "creation_time": "2018-10-07T07:03:24.577"
        },
        {
            "username": "unique_user1",
            "post_type": "memory_book",
            "_id": "5bb9afb93412655d35c54334",
            "url": "static/unique_user1/memory_book/9e71cfe6-2dbc-4f73-b204-05c16ed4d838.jpg",
            "shared_type": "public",
            "text": "This is dummy text1",
            "creation_time": "2018-10-07T07:03:21.508"
        }
    ],
    "msg": "Fetched Data Successfully",
    "status": "success"
}
status: 200


In case of Failure:
f not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400


3. In case memory book is private and
   user other then logged_user trying to view it

{
    "status": "failure",
    "msg": "You are not authorized to view memory book."
}
status: 400


###########################################################
######### Journal: Notes, todos, quotes and goals #########
###########################################################

---------------------- -----------------------------
---------------------- Save Journal ----------------
---------------------------------------------------

159.89.171.16:9000/user/save_journal

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Json Request:
{
	"journal_type": "quotes",
	"text": "This is the first journal"
}

Json Response:

In case of Success:
{
    "status": "success",
    "msg": "Post Inserted Successfully."
}
status: 200

In case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400



2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400



---------------------- -----------------------------
---------------------- Get Journal ----------------
---------------------------------------------------

159.89.171.16:9000/user/get_journal


Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
	"journal_type": "quotes",
	"profile_username": "unique_user1",
	"skip_count": 0
}
Note: journal_type - can be 'quotes', 'todos', 'notes', 'goals'
Note: skip_count - it is the number of journal which you want to skip while getting journal

Json Response:

In case of success:
{
    "msg": "Fetched Data Successfully",
    "journal_content": [
        {
            "_id": "5bbcc16534126575dcc715c1",
            "creation_time": "2018-10-09T14:55:33.992",
            "journal_type": "quotes",
            "text": "This is the first journal",
            "username": "unique_user1"
        },
        {
            "_id": "5bbcc16134126575dcc715be",
            "creation_time": "2018-10-09T14:55:29.572",
            "journal_type": "quotes",
            "text": "This is the second journal",
            "username": "unique_user1"
        }
    ],
    "status": "success"
}
status: 200


In case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400



2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400


---------------------- -----------------------------
---------------------- Delete Journal ----------------
---------------------------------------------------

159.89.171.16:9000/user/delete_journal


Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
	"journal_id": "5bbcc16534126575dcc715c1"
}

Note: journal_id - it is the which you will see when you do get_journal


Json Response:

In case of success:
{
    "status": "success", 
    "msg": "Journal Deleted Successfully"
}
status: 200


In case of failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400



2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400


3. If not able to delete journal
{
    "msg": "Not Able to Delete Journal",
    "status": "failure"
}
status: 400
