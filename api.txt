1) Signup Api: 

159.89.171.16:9000/user_auth/signup

Method Type: POST

Json request from frontend:

{
	"username": "unique_user1",
	"first_name": "Mantu",
	"sur_name": "Kumar",
	"email": "ad@gmail.com",
	"password": "test123",
	"dob": "12 Aug 2011"
}

Json Response from backend:

In Case of Success:
{
    "msg": "User Successfully Created",
    "status": "success",
    "code": "45",
    "token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVuaXF1ZV91c2VyOCIsImV4cCI6MTUzNjYwNDk5NH0.Qt7t1J1r9nfaeZ4sPUAIeatYzP0t_stK669lfmeifebQSe2NBmprqiZtuKPwaGrDhPglEVX0aLlVKiVY4M-5MQ"
}
status: 200

In Case of Failure:

{
    "status": "failure",
    "msg": "User already exists"
}
status:400


###########################
2) Signin/Login Api:
###########################

159.89.171.16:9000/user_auth/login

Method Type: POST

Json request from frontend:


{
	"username": "unique_user2",
	"password": "test123"
}

Json Response from backend:

In Case of Success:
{
    "msg": "Successfully logged in",
    "code": "54",
    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJleHAiOjE1Mzc2ODk4MjAsInVzZXJuYW1lIjoidW5pcXVlX3VzZXIxNyJ9.KW1-0m5eSbDQ7xeQjRiPWyf2gqGYlDkqUHX9-pZLoRKn7en5hgr5Ud4ObDr-zODgfjd1HdwAHI21LeEMcoS_KQ",
    "status": "success"
}


In Case of Failure:

Case1: If user does not exists
{
    "status": "failure",
    "msg": "User does not exists",
    "code": "53"
}

Case2: If Password is wrong
{
    "status": "failure",
    "msg": "Password is incorrect",
    "code": "55"
}

#####################
3) Logout Api:
####################

159.89.171.16:9000/user_auth/logout

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Method Type: POST 

Json Response:

In Case of Success:
{
    "msg": "Logged Out Successfully",
    "code": "70",
    "status": "success"
}

In Case Of Failure:

1. If no token supplied in headers
{
    "status": "failure",
    "msg": "No Token Supplied",
    "code": "72"
}

2. If token does not exists
{
    "status": "failure",
    "msg": "You are already logged out",
    "code": "71"
}



##########################
4) Reset Password
##########################
--------------------------------------------------------------------------------------
Step1: Send username that will trigger OTP mail to email associated with the username
--------------------------------------------------------------------------------------

api: 159.89.171.16:9000/user_auth/forgot_password

Method Type: POST

Json Request:
{
	"username": "unique_user12"
}

Json Response:

In Case of Success:
{
    "status": "success",
    "msg": "Please check for OTP in your asssociated email",
    "code": "82"
}

status: 200

In Case of failure:

1. If username is not valid i.e. blank
{"status": "failure", "code": "50", "msg": "Username cannot be blank"}
status: 400

2. If username does not exists
{"status": "failure", "code": "80", "msg": "User does not exists"}
status: 400

-------------------------------------------------------
Step2: Send username, password, otp to reset password
-------------------------------------------------------

api: 159.89.171.16:9000/user_auth/reset_password

Method Type: POST

Json Request:
{
	"username": "unique_user12",
	"otp": 659913,
	"password_1":"test_123"
}

Json Response:

In case of success:
{
    "status": "success",
    "msg": "Successfully Reset Password",
    "code": "89"
}
status: 200

In Case of Failure:

1. if username is not valid
{"status": "failure", "code": "50", "msg": "Username cannot be blank"}
status: 400

2. If OTP is not valid
{"status": "failure", "code": "84", "msg": "OTP cannot be blank"}
status: 400


3. If password is not valid
{"status": "failure", "code": "43", "msg": "Password must be betwenn 6 to 20 character"}

4. If OTP is not valid
{"status": "failure", "code": "85", "msg": "Not a Valid OTP"}
status: 400

5. In case passwrod reset unsuccessfull
{"status": "failure", "code": "88", "msg": "Password Reset Unsuccessfull"}
status: 400



####################
Profile Page
####################
-------------------------------------------
----------- Update about section ----------
-------------------------------------------

159.89.171.16:9000/user/update_about

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Json Request:
{
  "first_name" : "mantu",
  "sur_name": "kumar",
  "from": "Bangalore, Karnataka, India, Earth",
  "about": "Success is not final failure is not fatal - Winston Churchill",
  "dob": "10-10-2010",
  "langs": "Kannada, English",
  "contact": "9945126164",
  "email": "resistancet8@gmail.com",
  "favorite_art": "Writing"
}

Json Response:

In case of Success:
{
    "status": "success",
    "code": "51",
    "msg": "Successfully Updated Profile"
}

status: 200

In case of Failure:

1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}


3. If profile is not updated
{
    "status": "failure", 
    "code": "50", 
    "msg": "Could now Update Profile"
}

status: 400


-------------------------------------------
---------- Update Memory Book Privacy -----
-------------------------------------------

-------------------------------------------
----------- Update about section ----------
-------------------------------------------

159.89.171.16:9000/user/update_about

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
  "memory_book_privacy": "privacy_type"
}

Note: privacy_type can be 'public' or 'private'


Json Response:

In case of Success:
{
    "status": "success",
    "code": "51",
    "msg": "Successfully Updated Profile"
}

status: 200

In case of Failure:

1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}


3. If profile is not updated
{
    "status": "failure",
    "code": "50",
    "msg": "Could now Update Profile"
}
status: 400


-------------------------------------------
----------- Get Profile Page Data ---------
-------------------------------------------

159.89.171.16:9000/user/get_profile

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Json Request:
{
	"profile_username": "unique_user1",
	"skip_count": 0
}


Note: "profile_username": the profile which you want to view
Note: Maximum 10 records are returned
Note: Memory book is not returned if "memory_book_privacy" is "private"
      and the user requesting for profile_data is not the logged in user.

Json Response:

In Case of Success:
{
    "status": "success",
    "profile_data": {
        "memory_book_privacy": "public",
        "first_name": "mantu",
        "creation_time": "2018-10-06T10:13:38.436",
        "memory_book_privacry": "public",
        "stats": {
            "no_of_wins": 0,
            "content_shared": 0,
            "anonymous_shared": 0,
            "no_of_comments": 0,
            "no_of_likes": 0
        },
        "about": "Success is not final failure is not fatal - Winston Churchill",
        "sur_name": "kumar",
        "dob": "10-10-2010",
        "langs": "Kannada, English, kennedy",
        "favorite_art": "Writing, Singing, dancing, running",
        "from": "Bangalore, Karnataka, India, Earth"
    },
    "memory_book": [
        {
            "text": "This is dummy text",
            "url": "static/unique_user1/memory_book/afc7d04c-07e5-43d6-bb7f-4c301ead37a6.jpg",
            "shared_type": "public",
            "username": "unique_user1",
            "post_type": "memory_book",
            "_id": "5bb88b183412654cdd47779c"
        }
    ],
    "code": "20",
    "msg": "Fetched Data Successfully",
    "art_content": [
        {
            "text": "This is dummy text",
            "url": "static/unique_user1/art/f554b02a-0aca-490a-bead-e977cafc1e1f.jpg",
            "shared_type": "public",
            "post_type": "art",
            "username": "unique_user1",
            "art_type": "gazal",
            "_id": "5bb88b0c3412654cdd477796"
        },
        {
            "text": "This is dummy text",
            "url": "static/unique_user1/art/310b1172-6091-4a56-ad1c-2230c9f13e26.jpg",
            "shared_type": "public",
            "post_type": "art",
            "username": "unique_user1",
            "art_type": "song",
            "_id": "5bb88b053412654cdd477793"
        },
        {
            "text": "This is dummy text",
            "url": "static/unique_user1/art/973c71f1-71a5-4652-8e89-5307c411d6a8.jpg",
            "shared_type": "public",
            "post_type": "art",
            "username": "unique_user1",
            "art_type": "poem",
            "_id": "5bb88b003412654cdd477790"
        }
    ]
}

In Case of Failure:

1. If not a valid token in supplied
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}


2. If no profile data found
{
    "status": "failure", 
    "code": "21", 
    "msg": "No Profile Data Found"
}


-------------------------------------
------- Update Profile Pic ----------
-------------------------------------

159.89.171.16:9000/user/update_profile_pic

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Request:

form-data
key: pic
value: uploaded_pic


Json Response:

In case of Success:
{
    "url": "static/unique_user1/profile/68d09ecf-8ac1-4172-ac82-3a9da30d47f9.jpg",
    "status": "success",
    "msg": "Profile pic uploaded successfully"
}
status: 200

Note: You can show the image by appending "159.89.171.16:9000/static/unique_user1/profile/url"
      eg: 159.89.171.16:9000/static/unique_user1/profile/68d09ecf-8ac1-4172-ac82-3a9da30d47f9.jpg


In case of Failure:


1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400

3. If no 'pic' is supplied
{
    "status": "failure",
    "msg": "No pic supplied"
}
status: 400

4. If profile is not updated with 'url'
{
    "status": "failure",
    "code": "50",
    "msg": "Could now Update Profile"
}

status: 400


##############################
##### Insert Post ############
##############################

159.89.171.16:9000/user/insert_post

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Request:

form-data
key: pic
value: uploaded_pic

key: text
value: "Post Text"

key: post_type
value: art (can be 'memory_book' or 'art')

key: shared_type
value: 'public' (can be: "public", "anonymous", "compete", "save")


key: art_type
value: 'poem' (can be: "poem", "story", "quotes", "gazal", "rap", "singing", "comedy", "dance")


key: post_title
value: "Some Good Title"

key: author
value: "Name of the user"

Json Response:

In Case of Success:
{
    "status": "success",
    "msg": "Post Inserted Successfully."
}

In Case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400

3. If no 'pic' is supplied
{
    "status": "failure",
    "msg": "No pic supplied"
}
status: 400

4. If Plagarised content
{"status": "failure", "msg": "plagarised content"}



###################################################
######## Delete Post  ######
###################################################
159.89.171.16:9000/user/delete_post

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
  "post_id": "5bb9afbc3412655d35c54337"
}


Json Response:
In case of success:


In case of Failure:
1. If 'post_id' does not exists or already deleted
{
    "status": "failure",
    "msg": "Not Able to Delete Post"
}
status: 400


2. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400




###################################################
######## Update Signal - Likes and Comments  ######
###################################################

159.89.171.16:9000/user/update_signal

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
  "post_id": "5bc32a4f3412652264e08028",
  "signal_type": "like",
  "comment_text": "first comment"
}

Note: signal_type: can be 'like' or 'comment'
Note: comment_text - valid only if 'signal_type' is 'comment'


Json Response:

In case of Success:
1. For Likes
{
    "like_content": {
        "username": "unique_user1",
        "name": "Mantu Kumar"
    },
    "status": "success",
    "msg": "Successfully Updated Likes"
}
status: 200

2. For Comment
{
    "status": "success",
    "comment_content": {
        "name": "Mantu Kumar",
        "username": "unique_user1",
        "comment_text": "first comment"
    },
    "msg": "Successfully Updated Comments"
}
status: 200

In case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}
status: 400


2. If not able to update due to some reason
{
    "status": "failure",
    "msg": "Could not Update Likes"
}


3. If not able to update comment
{
    "status": "failure",
    "msg": "Could not Update Comments"
}

4. If user who is liking is not existing
{
    "status": "failure", 
    "code": "21", 
    "msg": "No Profile Data Found"
}





###################################################
######## Load More memory_book/art Post ###########
###################################################

159.89.171.16:9000/user/load_profile_post

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
	"profile_username": "unique_user1",
	"post_type": "memory_book", 
	"skip_count": 2
}

Note: skip_count - Number of post you want to skip.
Note: Maximum 10 Post will be returned.
Note: 'post_type' - can be 'memory_book' or 'art'


In case of Success:
{
    "memory_book": [
        {
            "username": "unique_user1",
            "post_type": "memory_book",
            "_id": "5bb9afbc3412655d35c54337",
            "url": "static/unique_user1/memory_book/64451662-35a1-4603-82e8-173f92b07902.jpg",
            "shared_type": "public",
            "text": "This is dummy text2",
            "creation_time": "2018-10-07T07:03:24.577"
        },
        {
            "username": "unique_user1",
            "post_type": "memory_book",
            "_id": "5bb9afb93412655d35c54334",
            "url": "static/unique_user1/memory_book/9e71cfe6-2dbc-4f73-b204-05c16ed4d838.jpg",
            "shared_type": "public",
            "text": "This is dummy text1",
            "creation_time": "2018-10-07T07:03:21.508"
        }
    ],
    "msg": "Fetched Data Successfully",
    "status": "success"
}
status: 200


In case of Failure:
f not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400


2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400


3. In case memory book is private and
   user other then logged_user trying to view it

{
    "status": "failure",
    "msg": "You are not authorized to view memory book."
}
status: 400


###########################################################
######### Journal: Notes, todos, quotes and goals #########
###########################################################

---------------------- -----------------------------
---------------------- Save Journal ----------------
---------------------------------------------------

159.89.171.16:9000/user/save_journal

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Json Request:
{
	"journal_type": "quotes",
	"text": "This is the first journal",
        "completed" : "Yes",
        "author" : "someone",
        "date": "any_date"
}

Note: completed - can be 'Yes' / 'No'. Valid only for 'todos' and 'goals'
Note: author - valid only for "quotes"
Note: date - valid only for goals
Json Response:

In case of Success:
{
    "status": "success",
    "msg": "Post Inserted Successfully."
}
status: 200

In case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400



2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400



---------------------- ------------------------------
---------------------- Get Journal ------------------
--- Gets goals, todos, notes, quotes individually ---
-----------------------------------------------------

159.89.171.16:9000/user/get_journal


Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
	"journal_type": "quotes",
	"profile_username": "unique_user1",
	"skip_count": 0,
        "limit_count": 5
}
Note: journal_type - can be 'quotes', 'todos', 'notes', 'goals'
Note: skip_count - it is the number of journal which you want to skip while getting journal
Note: limit_count - the number of post which you wan to be returned

Json Response:

In case of success:
{
    "msg": "Fetched Data Successfully",
    "journal_content": [
        {
            "_id": "5bbcc16534126575dcc715c1",
            "creation_time": "2018-10-09T14:55:33.992",
            "journal_type": "quotes",
            "text": "This is the first journal",
            "username": "unique_user1"
        },
        {
            "_id": "5bbcc16134126575dcc715be",
            "creation_time": "2018-10-09T14:55:29.572",
            "journal_type": "quotes",
            "text": "This is the second journal",
            "username": "unique_user1"
        }
    ],
    "status": "success"
}
status: 200


In case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400



2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400


---------------------- --------------------------------
---------------------- Get All Journal ----------------
--- Gets todos, notes, quotes, goals all at once ------
-------------------------------------------------------

159.89.171.16:9000/user/get_all_journal


Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
        "profile_username": "unique_user1",
        "skip_count": 0,
        "limit_count": 5
}
Note: skip_count - it is the number of journal which you want to skip while getting journal
Note: limit_count - the number of post which you wan to be returned

Json Response:

In case of success:
{
    "goals": [],
    "todos": [
        {
            "journal_type": "todos",
            "text": "This is the first journal",
            "_id": "5bc197b73412653d53b45769",
            "username": "unique_user1",
            "creation_time": "2018-10-13T06:59:03.187"
        }
    ],
    "notes": [
        {
            "text": "This is the second journal",
            "journal_type": "notes",
            "_id": "5bbcc15434126575dcc715bb",
            "username": "unique_user1",
            "creation_time": "2018-10-09T14:55:16.254"
        },
        {
            "journal_type": "notes",
            "text": "This is the first journal",
            "_id": "5bbcc07934126575ced6110e",
            "username": "unique_user1",
            "creation_time": "2018-10-09T14:51:37.500"
        }
    ],
    "status": "success",
    "msg": "Fetched data Successfully",
    "quotes": [
        {
            "journal_type": "quotes",
            "text": "This is the first journal",
            "_id": "5bc19cdb3412653fabaee4a7",
            "username": "unique_user1",
            "creation_time": "2018-10-13T07:20:59.501"
        },
        {
            "journal_type": "quotes",
            "text": "This is the first journal",
            "_id": "5bc19cda3412653fabaee4a4",
            "username": "unique_user1",
            "creation_time": "2018-10-13T07:20:58.565"
        },
        {
            "text": "This is the second journal",
            "journal_type": "quotes",
            "_id": "5bbcc16134126575dcc715be",
            "username": "unique_user1",
            "creation_time": "2018-10-09T14:55:29.572"
        }
    ]
}
status: 200


In case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400

---------------------- -----------------------------
---------------------- Delete Journal ----------------
---------------------------------------------------

159.89.171.16:9000/user/delete_journal


Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value


Json Request:
{
	"journal_id": "5bbcc16534126575dcc715c1"
}

Note: journal_id - it is the which you will see when you do get_journal


Json Response:

In case of success:
{
    "status": "success", 
    "msg": "Journal Deleted Successfully"
}
status: 200


In case of failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}

status: 400



2. If session expired
{
    "msg": "Session Expired. You must login again",
    "status": "failure"
}
status: 400


3. If not able to delete journal
{
    "msg": "Not Able to Delete Journal",
    "status": "failure"
}
status: 400


----------------------------------------------------------------
--------- Flagging todos/goals ---------------------------------
----------------------------------------------------------------

159.89.171.16:9000/user/flag_todos_goals


Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Josn Request:
{
	"journal_id": "5bc216433412656796a1410b",
	"completed": "Yes"
}

Json Response:

In case of Success:
{
	"journal_id": "5bc216433412656796a1410b",
	"completed": "Yes"
}
status:200


In case of Failure:
1. If "journal_id" does not exists.
{
       "status": "failure", 
        "msg": "Flagging Unsuccessfull."
}
status: 400

2. If "journal_id" is not a valid "object_id"
{
    "status": "failure", 
    "msg": "Not a valid journal_id is passed"
}
status:400

3. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}
status: 400


#################################################################
############################# Trending / Home Page ##############
#################################################################


-----------------------------------------------------------------
----------------- Get Currently Shared Post ---------------------
-----------------------------------------------------------------

159.89.171.16:9001/user/get_all_trending

Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Json Request:
{
	"skip_count": 3,
	"limit_count":5
}


Json Response:

In case of Success:
{
    "all_content": [
        {
            "_id": "5bc195493412653bc2ffb467",
            "username": "unique_user1",
            "text": "This is dummy text5",
            "creation_time": "2018-10-13T06:48:41.209",
            "url": "static/unique_user1/art/a4466e3f-faeb-415e-b763-02d0b5079c07.jpg",
            "art_type": "hate",
            "post_type": "art",
            "shared_type": "public"
        },
        {
            "_id": "5bc195343412653bc2ffb463",
            "username": "unique_user1",
            "text": "This is dummy text5",
            "creation_time": "2018-10-13T06:48:20.960",
            "url": "static/unique_user1/art/2d530451-4e8a-4045-9b1e-3ae66846170b.jpg",
            "art_type": "hate",
            "post_type": "art",
            "shared_type": "public"
        },
        {
            "_id": "5bc191de3412653ac07c0213",
            "username": "unique_user1",
            "text": "This is dummy text5",
            "creation_time": "2018-10-13T06:34:06.775",
            "url": "static/unique_user1/art/8cfa0aa5-afc6-46b8-b11c-2e083155673a.jpg",
            "art_type": "hate",
            "post_type": "art",
            "shared_type": "public"
        },
        {
            "_id": "5bc191b83412653ac07c0210",
            "text": "This is dummy text5",
            "creation_time": "2018-10-13T06:33:28.689",
            "url": "static/unique_user1/memory_book/751feeb0-0f4c-47b8-b131-1083e668cbde.jpg",
            "username": "unique_user1",
            "post_type": "memory_book",
            "shared_type": "anonymous"
        },
        {
            "_id": "5bc187e93412653836ebbb4c",
            "text": "This is dummy text5",
            "creation_time": "2018-10-13T05:51:37.447",
            "post_type": "memory_book",
            "username": "unique_user1",
            "url": "static/unique_user1/memory_book/df59e0f8-8ce3-45b3-ac53-6a43acf35e68.jpg",
            "shared_type": "anonymous"
        }
    ],
    "status": "success",
    "msg": "Fetched Data Successfully"
}
status: 200


In case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}
status: 400


-------------------------------------------------------------------------------------------------
---------------- Get Trending: rap, poem, story, quotes, gazal, singing, comedy, dance ----------
------------------------------------------------------------------------------------------------

159.89.171.16:9001/user/get_trending


Method Type: POST

Header Request:
key: token
value: generated_token_value
i.e. token = value

Json Request:
{
	"skip_count": 0,
	"trending_type": "rap"
}

Note: trending_type - can be  rap, poem, story, quotes, gazal, singing, comedy, dance


Json Response:
In case of Success:
{
    "status": "success",
    "msg": "Fetched Data Successfully",
    "all_content": [
        {
            "shared_type": "public",
            "art_type": "rap",
            "post_title": null,
            "author": null,
            "text": "third rap",
            "_id": "5bc74dcc34126578de603411",
            "user_liked": [
                {
                    "name": "Mantu Kumar",
                    "username": "unique_user1"
                },
                {
                    "name": "Mantu Kumar",
                    "username": "unique_user2"
                }
            ],
            "comments": [],
            "likes": 2,
            "post_type": "art",
            "creation_time": "2018-10-17T14:57:16.644",
            "total_comments": 0,
            "username": "unique_user1"
        },
        {
            "shared_type": "anonymous",
            "art_type": "rap",
            "post_title": null,
            "author": null,
            "text": "first rap",
            "_id": "5bc74da834126578de60340b",
            "user_liked": [],
            "comments": [],
            "likes": 0,
            "post_type": "art",
            "creation_time": "2018-10-17T14:56:40.533",
            "total_comments": 0,
            "username": "unique_user1"
        },
        {
            "shared_type": "public",
            "art_type": "rap",
            "post_title": null,
            "author": null,
            "text": "second rap",
            "_id": "5bc74dc534126578de60340e",
            "user_liked": [],
            "comments": [
                {
                    "name": "Mantu Kumar",
                    "comment_text": "first comment",
                    "username": "unique_user1"
                }
            ],
            "likes": 0,
            "post_type": "art",
            "creation_time": "2018-10-17T14:57:09.736",
            "total_comments": 1,
            "username": "unique_user1"
        }
    ]
}
status: 200


In case of failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}
status: 400


########################################################
############ Competetion ###############################
########################################################

------------ Post type Competetion --------------------
Note: If post type is competetion then following
      is the response when you call 'insert_data'



Json Response:
{
    "msg": "Post Inserted Successfully.",
    "status": "success",
    "post_content": {
        "_id": "5bc899e4341265215f0c77ba",
        "participants": [
            {
                "comments": [],
                "total_comments": 0,
                "author": "Mantu Kumar",
                "username": "unique_user1",
                "likes": 0,
                "text": "first poem",
                "user_liked": [],
                "part_post_id": "5bc899e4341265215f0c77b9"
            }
        ],
        "art_type": "poem",
        "creation_time": "2018-10-18T14:34:12.762",
        "shared_type": "compete",
        "post_title": null,
        "start_time": "2018-10-19T14:34:12.762",
        "post_type": "art",
        "winner": "Yet To Be Decided",
        "end_time": "2018-10-21T14:34:12.762"
    }
}


--------------------------------------------------------
------------ Join Competetion -------------------------
--------------------------------------------------------

159.89.171.16:9001/user/join_contest

Method type: POST

Header Request:
key: Authorization
value: generated_token_value
i.e. Authorization = value

Request:

form-data
key: pic
value: uploaded_pic

key: text
value: "Post Text"

key: post_title
value: "Any title"

key: post_id
value: "competetion / post id"


Json Response:
In case of Success:
{
    "status": "success",
    "participant_data": {
        "likes": 0,
        "username": "unique_user2",
        "total_comments": 0,
        "part_post_id": "5bc89c84341265234d270208",
        "post_title": "this is awesome",
        "comments": [],
        "text": "First join",
        "user_liked": [],
        "author": "Mantu Kumar"
    },
    "msg": "Competetion Joined Successfully"
}


In case of failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}
status: 400

2. If user already participated
{
    "status": "failure",
    "msg": "User has already participated"
}
status: 400

3. If competetion already started
{
    "status": "failure", 
    "msg": "Competetion Already Started."
}
status: 400

4. If user does not exists
{
    "status": "failure", 
    "code": "21", 
    "msg": "No Profile Data Found"
}
status: 400


5. If post_id does not exists
{
    "msg": "Post ID does not exists",
    "status": "failure"
}
status: 400

-------------------------------------------------------------------------
------------ Update contest signal -------------------------------------
-------------------------------------------------------------------------


159.89.171.16:9000/user/update_contest_signal

Method type: POST

Header Request:
key: Authorization
value: generated_token_value
i.e. Authorization = value


Json Request:
{
	"post_id": "5bcb150c3412654505492cb0",
	"part_post_id":"5bcb152634126545136071f9",
	"signal_type": "comment",
	"comment_text": "first comment"
}

Note: signal_type - can be 'comment' or 'like'
Note: comment_text - valid only for 'signal_type': 'comment'


Json Response:


In case of success:

1. For likes
{
    "like_content": {
        "username": "unique_user2",
        "name": "Mantu Kumar"
    },
    "msg": "Successfully Updated Likes",
    "status": "success"
}
status: 200


2. For comments
{
    "status": "success",
    "msg": "Successfully Updated Comments",
    "comment_content": {
        "name": "Mantu Kumar",
        "username": "unique_user2",
        "comment_text": "first comment"
    }
}
status: 200


In case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}
status: 400


2. If not able to update due to some reason
{
    "status": "failure",
    "msg": "Could not Update Likes"
}


3. If not able to update comment
{
    "status": "failure",
    "msg": "Could not Update Comments"
}

4. If user who is liking is not existing
{
    "status": "failure",
    "code": "21",
    "msg": "No Profile Data Found"
}


--------------------------------------------------------------------
------------ Get contest: upcoming, ongoing, finished, all ---------
--------------------------------------------------------------------

159.89.171.16:9000/user/get_contest

Method type: POST

Header Request:
key: Authorization
value: generated_token_value
i.e. Authorization = value


Json Request:
{
	"skip_count":0,
	"compete_status": "all"
}

Note: compete_status - can be 'upcoming', 'ongoing', 'finished', 'all'


Json Response:
{
    "all_content": {
        "ongoing": [],
        "finshed": [],
        "upcoming": [
            {
                "start_time": "2018-11-12T07:16:04.958",
                "art_type": "poem",
                "creation_time": "2018-11-11T07:16:04.958",
                "participants": [
                    {
                        "total_comments": 0,
                        "comments": [],
                        "username": "unique_user1",
                        "user_liked": [],
                        "text": "first poem2",
                        "likes": 0,
                        "part_post_id": "5be7d7343412654fa04cac5b",
                        "author": "Mantu Kumar"
                    }
                ],
                "post_title": null,
                "end_time": "2018-11-14T07:16:04.958",
                "shared_type": "compete",
                "_id": "5be7d7343412654fa04cac5c",
                "winner": "Yet To Be Decided",
                "post_type": "art"
            },
            {
                "start_time": "2018-11-12T07:15:44.714",
                "art_type": "poem",
                "creation_time": "2018-11-11T07:15:44.714",
                "participants": [
                    {
                        "total_comments": 0,
                        "comments": [],
                        "username": "unique_user1",
                        "user_liked": [],
                        "text": "first poem",
                        "likes": 0,
                        "part_post_id": "5be7d7203412654fa04cac57",
                        "author": "Mantu Kumar"
                    }
                ],
                "post_title": null,
                "end_time": "2018-11-14T07:15:44.714",
                "shared_type": "compete",
                "_id": "5be7d7203412654fa04cac58",
                "winner": "Yet To Be Decided",
                "post_type": "art"
            }
        ]
    },
    "msg": "Fetched Data Successfully",
    "status": "success"
}

In case of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}
status: 400

2. If compete_status is not 'upcoming', 'ongoing', 'finished'
{
    "msg": "Invalid compete status",
    "status": "failure"
}
status: 400


############## Get Single Post ###################
##################################################
159.89.171.16:9000/user/get_single_post

Method type: POST

Header Request:
key: Authorization
value: generated_token_value
i.e. Authorization = value


Json Request:
{
        "post_id": "5befe2743412651a932734a5",
}


Json Response:

In case of Success:
{
    "status": "success",
    "msg": "Post Fetched Successfully.",
    "post_data": {
        "_id": "5befe2743412651a932734a5",
        "shared_type": "compete",
        "art_type": "Poem",
        "creation_time": "2018-11-17T09:42:12.471",
        "winner": "Yet To Be Decided",
        "post_title": "First poem contest",
        "participants": [
            {
                "likes": 0,
                "comments": [],
                "text": "The text which is entered",
                "total_comments": 0,
                "url": "static/unique_user1/art/5a0692c5-4508-4864-8631-dc841b02a3a7.jpg",
                "author": "Mantu",
                "user_liked": [],
                "username": "unique_user1",
                "part_post_id": "5befe2743412651a932734a4"
            },
            {
                "likes": 0,
                "comments": [],
                "text": "body of comp1 ",
                "total_comments": 0,
                "post_title": "joining compe 1",
                "author": "Naveen Kumar",
                "user_liked": [],
                "username": "resistancet9",
                "part_post_id": "5befeaa13412651d34e56ad0"
            }
        ],
        "post_type": "art",
        "start_time": "2018-11-18T09:42:12.471",
        "end_time": "2018-11-20T09:42:12.471"
    }
}
status: 200


In cas of Failure:
1. If not a valid token is supplied in header
{
    "msg": "Invalid Token",
    "code": "14",
    "status": "failure"
}
status: 400

2. If user who is liking is not existing
{
    "status": "failure",
    "code": "21",
    "msg": "No Profile Data Found"
}


3. If post_id does not exists
{
    "status": "failure",
    "msg": "No Post Exists."
}
status: 400 
